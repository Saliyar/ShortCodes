experiment "Irregular waves for ECN campaigns" with ("nantes_main_posn/default.ttf")

int i;
int harmo;
real ampli;
real angl;
real phas;

/* Wave data read from .dat files prepared with MatLab routine LHEEA_irrwave_generation_MAIN.m */

/* Read and build poly-chromatic wave */
wave the_wave1 = null;
wave the_wave1_1 = null;
real data1_1[] = [
#include "data/Test_case_3_15seeds_1_1.dat"
0];
for i=1 to (sizeof(data1_1[])-1)/5 do
   harmo = floor(data1_1[5*(i-1)+1]);
   ampli = data1_1[5*(i-1)+3];
   angl = data1_1[5*(i-1)+4];
   phas = data1_1[5*(i-1)+5];
   the_wave1_1 = the_wave1_1 + front(harmo,ampli,angl,phas);
end;
the_wave1 = the_wave1 + the_wave1_1;

wave the_wave1_2 = null;
real data1_2[] = [
#include "data/Test_case_3_15seeds_1_2.dat"
0];
for i=1 to (sizeof(data1_2[])-1)/5 do
   harmo = floor(data1_2[5*(i-1)+1]);
   ampli = data1_2[5*(i-1)+3];
   angl = data1_2[5*(i-1)+4];
   phas = data1_2[5*(i-1)+5];
   the_wave1_2 = the_wave1_2 + front(harmo,ampli,angl,phas);
end;
the_wave1 = the_wave1 + the_wave1_2;

/* Read and build poly-chromatic wave */
wave the_wave2 = null;
wave the_wave2_1 = null;
real data2_1[] = [
#include "data/Test_case_3_15seeds_2_1.dat"
0];
for i=1 to (sizeof(data2_1[])-1)/5 do
   harmo = floor(data2_1[5*(i-1)+1]);
   ampli = data2_1[5*(i-1)+3];
   angl = data2_1[5*(i-1)+4];
   phas = data2_1[5*(i-1)+5];
   the_wave2_1 = the_wave2_1 + front(harmo,ampli,angl,phas);
end;
the_wave2 = the_wave2 + the_wave2_1;

wave the_wave2_2 = null;
real data2_2[] = [
#include "data/Test_case_3_15seeds_2_2.dat"
0];
for i=1 to (sizeof(data2_2[])-1)/5 do
   harmo = floor(data2_2[5*(i-1)+1]);
   ampli = data2_2[5*(i-1)+3];
   angl = data2_2[5*(i-1)+4];
   phas = data2_2[5*(i-1)+5];
   the_wave2_2 = the_wave2_2 + front(harmo,ampli,angl,phas);
end;
the_wave2 = the_wave2 + the_wave2_2;

/* Read and build poly-chromatic wave */
wave the_wave3 = null;
wave the_wave3_1 = null;
real data3_1[] = [
#include "data/Test_case_3_15seeds_3_1.dat"
0];
for i=1 to (sizeof(data3_1[])-1)/5 do
   harmo = floor(data3_1[5*(i-1)+1]);
   ampli = data3_1[5*(i-1)+3];
   angl = data3_1[5*(i-1)+4];
   phas = data3_1[5*(i-1)+5];
   the_wave3_1 = the_wave3_1 + front(harmo,ampli,angl,phas);
end;
the_wave3 = the_wave3 + the_wave3_1;

wave the_wave3_2 = null;
real data3_2[] = [
#include "data/Test_case_3_15seeds_3_2.dat"
0];
for i=1 to (sizeof(data3_2[])-1)/5 do
   harmo = floor(data3_2[5*(i-1)+1]);
   ampli = data3_2[5*(i-1)+3];
   angl = data3_2[5*(i-1)+4];
   phas = data3_2[5*(i-1)+5];
   the_wave3_2 = the_wave3_2 + front(harmo,ampli,angl,phas);
end;
the_wave3 = the_wave3 + the_wave3_2;

/* Read and build poly-chromatic wave */
wave the_wave4 = null;
wave the_wave4_1 = null;
real data4_1[] = [
#include "data/Test_case_3_15seeds_4_1.dat"
0];
for i=1 to (sizeof(data4_1[])-1)/5 do
   harmo = floor(data4_1[5*(i-1)+1]);
   ampli = data4_1[5*(i-1)+3];
   angl = data4_1[5*(i-1)+4];
   phas = data4_1[5*(i-1)+5];
   the_wave4_1 = the_wave4_1 + front(harmo,ampli,angl,phas);
end;
the_wave4 = the_wave4 + the_wave4_1;

wave the_wave4_2 = null;
real data4_2[] = [
#include "data/Test_case_3_15seeds_4_2.dat"
0];
for i=1 to (sizeof(data4_2[])-1)/5 do
   harmo = floor(data4_2[5*(i-1)+1]);
   ampli = data4_2[5*(i-1)+3];
   angl = data4_2[5*(i-1)+4];
   phas = data4_2[5*(i-1)+5];
   the_wave4_2 = the_wave4_2 + front(harmo,ampli,angl,phas);
end;
the_wave4 = the_wave4 + the_wave4_2;

/* Read and build poly-chromatic wave */
wave the_wave5 = null;
wave the_wave5_1 = null;
real data5_1[] = [
#include "data/Test_case_3_15seeds_5_1.dat"
0];
for i=1 to (sizeof(data5_1[])-1)/5 do
   harmo = floor(data5_1[5*(i-1)+1]);
   ampli = data5_1[5*(i-1)+3];
   angl = data5_1[5*(i-1)+4];
   phas = data5_1[5*(i-1)+5];
   the_wave5_1 = the_wave5_1 + front(harmo,ampli,angl,phas);
end;
the_wave5 = the_wave5 + the_wave5_1;

wave the_wave5_2 = null;
real data5_2[] = [
#include "data/Test_case_3_15seeds_5_2.dat"
0];
for i=1 to (sizeof(data5_2[])-1)/5 do
   harmo = floor(data5_2[5*(i-1)+1]);
   ampli = data5_2[5*(i-1)+3];
   angl = data5_2[5*(i-1)+4];
   phas = data5_2[5*(i-1)+5];
   the_wave5_2 = the_wave5_2 + front(harmo,ampli,angl,phas);
end;
the_wave5 = the_wave5 + the_wave5_2;

/* Read and build poly-chromatic wave */
wave the_wave6 = null;
wave the_wave6_1 = null;
real data6_1[] = [
#include "data/Test_case_3_15seeds_6_1.dat"
0];
for i=1 to (sizeof(data6_1[])-1)/5 do
   harmo = floor(data6_1[5*(i-1)+1]);
   ampli = data6_1[5*(i-1)+3];
   angl = data6_1[5*(i-1)+4];
   phas = data6_1[5*(i-1)+5];
   the_wave6_1 = the_wave6_1 + front(harmo,ampli,angl,phas);
end;
the_wave6 = the_wave6 + the_wave6_1;

wave the_wave6_2 = null;
real data6_2[] = [
#include "data/Test_case_3_15seeds_6_2.dat"
0];
for i=1 to (sizeof(data6_2[])-1)/5 do
   harmo = floor(data6_2[5*(i-1)+1]);
   ampli = data6_2[5*(i-1)+3];
   angl = data6_2[5*(i-1)+4];
   phas = data6_2[5*(i-1)+5];
   the_wave6_2 = the_wave6_2 + front(harmo,ampli,angl,phas);
end;
the_wave6 = the_wave6 + the_wave6_2;

/* Read and build poly-chromatic wave */
wave the_wave7 = null;
wave the_wave7_1 = null;
real data7_1[] = [
#include "data/Test_case_3_15seeds_7_1.dat"
0];
for i=1 to (sizeof(data7_1[])-1)/5 do
   harmo = floor(data7_1[5*(i-1)+1]);
   ampli = data7_1[5*(i-1)+3];
   angl = data7_1[5*(i-1)+4];
   phas = data7_1[5*(i-1)+5];
   the_wave7_1 = the_wave7_1 + front(harmo,ampli,angl,phas);
end;
the_wave7 = the_wave7 + the_wave7_1;

wave the_wave7_2 = null;
real data7_2[] = [
#include "data/Test_case_3_15seeds_7_2.dat"
0];
for i=1 to (sizeof(data7_2[])-1)/5 do
   harmo = floor(data7_2[5*(i-1)+1]);
   ampli = data7_2[5*(i-1)+3];
   angl = data7_2[5*(i-1)+4];
   phas = data7_2[5*(i-1)+5];
   the_wave7_2 = the_wave7_2 + front(harmo,ampli,angl,phas);
end;
the_wave7 = the_wave7 + the_wave7_2;

/* Read and build poly-chromatic wave */
wave the_wave8 = null;
wave the_wave8_1 = null;
real data8_1[] = [
#include "data/Test_case_3_15seeds_8_1.dat"
0];
for i=1 to (sizeof(data8_1[])-1)/5 do
   harmo = floor(data8_1[5*(i-1)+1]);
   ampli = data8_1[5*(i-1)+3];
   angl = data8_1[5*(i-1)+4];
   phas = data8_1[5*(i-1)+5];
   the_wave8_1 = the_wave8_1 + front(harmo,ampli,angl,phas);
end;
the_wave8 = the_wave8 + the_wave8_1;

wave the_wave8_2 = null;
real data8_2[] = [
#include "data/Test_case_3_15seeds_8_2.dat"
0];
for i=1 to (sizeof(data8_2[])-1)/5 do
   harmo = floor(data8_2[5*(i-1)+1]);
   ampli = data8_2[5*(i-1)+3];
   angl = data8_2[5*(i-1)+4];
   phas = data8_2[5*(i-1)+5];
   the_wave8_2 = the_wave8_2 + front(harmo,ampli,angl,phas);
end;
the_wave8 = the_wave8 + the_wave8_2;

/* Read and build poly-chromatic wave */
wave the_wave9 = null;
wave the_wave9_1 = null;
real data9_1[] = [
#include "data/Test_case_3_15seeds_9_1.dat"
0];
for i=1 to (sizeof(data9_1[])-1)/5 do
   harmo = floor(data9_1[5*(i-1)+1]);
   ampli = data9_1[5*(i-1)+3];
   angl = data9_1[5*(i-1)+4];
   phas = data9_1[5*(i-1)+5];
   the_wave9_1 = the_wave9_1 + front(harmo,ampli,angl,phas);
end;
the_wave9 = the_wave9 + the_wave9_1;

wave the_wave9_2 = null;
real data9_2[] = [
#include "data/Test_case_3_15seeds_9_2.dat"
0];
for i=1 to (sizeof(data9_2[])-1)/5 do
   harmo = floor(data9_2[5*(i-1)+1]);
   ampli = data9_2[5*(i-1)+3];
   angl = data9_2[5*(i-1)+4];
   phas = data9_2[5*(i-1)+5];
   the_wave9_2 = the_wave9_2 + front(harmo,ampli,angl,phas);
end;
the_wave9 = the_wave9 + the_wave9_2;

/* Read and build poly-chromatic wave */
wave the_wave10 = null;
wave the_wave10_1 = null;
real data10_1[] = [
#include "data/Test_case_3_15seeds_10_1.dat"
0];
for i=1 to (sizeof(data10_1[])-1)/5 do
   harmo = floor(data10_1[5*(i-1)+1]);
   ampli = data10_1[5*(i-1)+3];
   angl = data10_1[5*(i-1)+4];
   phas = data10_1[5*(i-1)+5];
   the_wave10_1 = the_wave10_1 + front(harmo,ampli,angl,phas);
end;
the_wave10 = the_wave10 + the_wave10_1;

wave the_wave10_2 = null;
real data10_2[] = [
#include "data/Test_case_3_15seeds_10_2.dat"
0];
for i=1 to (sizeof(data10_2[])-1)/5 do
   harmo = floor(data10_2[5*(i-1)+1]);
   ampli = data10_2[5*(i-1)+3];
   angl = data10_2[5*(i-1)+4];
   phas = data10_2[5*(i-1)+5];
   the_wave10_2 = the_wave10_2 + front(harmo,ampli,angl,phas);
end;
the_wave10 = the_wave10 + the_wave10_2;

/* Read and build poly-chromatic wave */
wave the_wave11 = null;
wave the_wave11_1 = null;
real data11_1[] = [
#include "data/Test_case_3_15seeds_11_1.dat"
0];
for i=1 to (sizeof(data11_1[])-1)/5 do
   harmo = floor(data11_1[5*(i-1)+1]);
   ampli = data11_1[5*(i-1)+3];
   angl = data11_1[5*(i-1)+4];
   phas = data11_1[5*(i-1)+5];
   the_wave11_1 = the_wave11_1 + front(harmo,ampli,angl,phas);
end;
the_wave11 = the_wave11 + the_wave11_1;

wave the_wave11_2 = null;
real data11_2[] = [
#include "data/Test_case_3_15seeds_11_2.dat"
0];
for i=1 to (sizeof(data11_2[])-1)/5 do
   harmo = floor(data11_2[5*(i-1)+1]);
   ampli = data11_2[5*(i-1)+3];
   angl = data11_2[5*(i-1)+4];
   phas = data11_2[5*(i-1)+5];
   the_wave11_2 = the_wave11_2 + front(harmo,ampli,angl,phas);
end;
the_wave11 = the_wave11 + the_wave11_2;

/* Read and build poly-chromatic wave */
wave the_wave12 = null;
wave the_wave12_1 = null;
real data12_1[] = [
#include "data/Test_case_3_15seeds_12_1.dat"
0];
for i=1 to (sizeof(data12_1[])-1)/5 do
   harmo = floor(data12_1[5*(i-1)+1]);
   ampli = data12_1[5*(i-1)+3];
   angl = data12_1[5*(i-1)+4];
   phas = data12_1[5*(i-1)+5];
   the_wave12_1 = the_wave12_1 + front(harmo,ampli,angl,phas);
end;
the_wave12 = the_wave12 + the_wave12_1;

wave the_wave12_2 = null;
real data12_2[] = [
#include "data/Test_case_3_15seeds_12_2.dat"
0];
for i=1 to (sizeof(data12_2[])-1)/5 do
   harmo = floor(data12_2[5*(i-1)+1]);
   ampli = data12_2[5*(i-1)+3];
   angl = data12_2[5*(i-1)+4];
   phas = data12_2[5*(i-1)+5];
   the_wave12_2 = the_wave12_2 + front(harmo,ampli,angl,phas);
end;
the_wave12 = the_wave12 + the_wave12_2;

/* Read and build poly-chromatic wave */
wave the_wave13 = null;
wave the_wave13_1 = null;
real data13_1[] = [
#include "data/Test_case_3_15seeds_13_1.dat"
0];
for i=1 to (sizeof(data13_1[])-1)/5 do
   harmo = floor(data13_1[5*(i-1)+1]);
   ampli = data13_1[5*(i-1)+3];
   angl = data13_1[5*(i-1)+4];
   phas = data13_1[5*(i-1)+5];
   the_wave13_1 = the_wave13_1 + front(harmo,ampli,angl,phas);
end;
the_wave13 = the_wave13 + the_wave13_1;

wave the_wave13_2 = null;
real data13_2[] = [
#include "data/Test_case_3_15seeds_13_2.dat"
0];
for i=1 to (sizeof(data13_2[])-1)/5 do
   harmo = floor(data13_2[5*(i-1)+1]);
   ampli = data13_2[5*(i-1)+3];
   angl = data13_2[5*(i-1)+4];
   phas = data13_2[5*(i-1)+5];
   the_wave13_2 = the_wave13_2 + front(harmo,ampli,angl,phas);
end;
the_wave13 = the_wave13 + the_wave13_2;

/* Read and build poly-chromatic wave */
wave the_wave14 = null;
wave the_wave14_1 = null;
real data14_1[] = [
#include "data/Test_case_3_15seeds_14_1.dat"
0];
for i=1 to (sizeof(data14_1[])-1)/5 do
   harmo = floor(data14_1[5*(i-1)+1]);
   ampli = data14_1[5*(i-1)+3];
   angl = data14_1[5*(i-1)+4];
   phas = data14_1[5*(i-1)+5];
   the_wave14_1 = the_wave14_1 + front(harmo,ampli,angl,phas);
end;
the_wave14 = the_wave14 + the_wave14_1;

wave the_wave14_2 = null;
real data14_2[] = [
#include "data/Test_case_3_15seeds_14_2.dat"
0];
for i=1 to (sizeof(data14_2[])-1)/5 do
   harmo = floor(data14_2[5*(i-1)+1]);
   ampli = data14_2[5*(i-1)+3];
   angl = data14_2[5*(i-1)+4];
   phas = data14_2[5*(i-1)+5];
   the_wave14_2 = the_wave14_2 + front(harmo,ampli,angl,phas);
end;
the_wave14 = the_wave14 + the_wave14_2;

/* Read and build poly-chromatic wave */
wave the_wave15 = null;
wave the_wave15_1 = null;
real data15_1[] = [
#include "data/Test_case_3_15seeds_15_1.dat"
0];
for i=1 to (sizeof(data15_1[])-1)/5 do
   harmo = floor(data15_1[5*(i-1)+1]);
   ampli = data15_1[5*(i-1)+3];
   angl = data15_1[5*(i-1)+4];
   phas = data15_1[5*(i-1)+5];
   the_wave15_1 = the_wave15_1 + front(harmo,ampli,angl,phas);
end;
the_wave15 = the_wave15 + the_wave15_1;

wave the_wave15_2 = null;
real data15_2[] = [
#include "data/Test_case_3_15seeds_15_2.dat"
0];
for i=1 to (sizeof(data15_2[])-1)/5 do
   harmo = floor(data15_2[5*(i-1)+1]);
   ampli = data15_2[5*(i-1)+3];
   angl = data15_2[5*(i-1)+4];
   phas = data15_2[5*(i-1)+5];
   the_wave15_2 = the_wave15_2 + front(harmo,ampli,angl,phas);
end;
the_wave15 = the_wave15 + the_wave15_2;

/* End of wave data */

begin
   run "Run1, Bret, Tp=1.11s, Hs=0.145m, ph=01" with (16)
      makewave the_wave1 on 1;
   end;
   run "Run2, Bret, Tp=1.11s, Hs=0.145m, ph=02" with (16)
      makewave the_wave2 on 1;
   end;
   run "Run3, Bret, Tp=1.11s, Hs=0.145m, ph=03" with (16)
      makewave the_wave3 on 1;
   end;
   run "Run4, Bret, Tp=1.11s, Hs=0.145m, ph=04" with (16)
      makewave the_wave4 on 1;
   end;
   run "Run5, Bret, Tp=1.11s, Hs=0.145m, ph=05" with (16)
      makewave the_wave5 on 1;
   end;
   run "Run6, Bret, Tp=1.11s, Hs=0.145m, ph=06" with (16)
      makewave the_wave6 on 1;
   end;
   run "Run7, Bret, Tp=1.11s, Hs=0.145m, ph=07" with (16)
      makewave the_wave7 on 1;
   end;
   run "Run8, Bret, Tp=1.11s, Hs=0.145m, ph=08" with (16)
      makewave the_wave8 on 1;
   end;
   run "Run9, Bret, Tp=1.11s, Hs=0.145m, ph=09" with (16)
      makewave the_wave9 on 1;
   end;
   run "Run10, Bret, Tp=1.11s, Hs=0.145m, ph=10" with (16)
      makewave the_wave10 on 1;
   end;
   run "Run11, Bret, Tp=1.11s, Hs=0.145m, ph=11" with (16)
      makewave the_wave11 on 1;
   end;
   run "Run12, Bret, Tp=1.11s, Hs=0.145m, ph=12" with (16)
      makewave the_wave12 on 1;
   end;
   run "Run13, Bret, Tp=1.11s, Hs=0.145m, ph=13" with (16)
      makewave the_wave13 on 1;
   end;
   run "Run14, Bret, Tp=1.11s, Hs=0.145m, ph=14" with (16)
      makewave the_wave14 on 1;
   end;
   run "Run15, Bret, Tp=1.11s, Hs=0.145m, ph=15" with (16)
      makewave the_wave15 on 1;
   end;
end;
