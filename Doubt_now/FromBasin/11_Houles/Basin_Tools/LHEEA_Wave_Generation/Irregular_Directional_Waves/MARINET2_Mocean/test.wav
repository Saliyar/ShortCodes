experiment "Irregular waves for ECN campaigns" with ("nantes_towing/towing_h2p9_v3.ttf")

int i;
int harmo;
real ampli;
real angl;
real phas;

/* Wave data read from .dat files prepared with MatLab routine LHEEA_irrwave_generation_MAIN.m */

/* Read and build poly-chromatic wave */
wave the_wave1 = null;
wave the_wave1_1 = null;
real data1_1[] = [
#include "data\test_1_1.dat"
0];
for i=1 to (sizeof(data1_1[])-1)/5 do
   harmo = floor(data1_1[5*(i-1)+1]);
   ampli = data1_1[5*(i-1)+3];
   angl = data1_1[5*(i-1)+4];
   phas = data1_1[5*(i-1)+5];
   the_wave1_1 = the_wave1_1 + front(harmo,ampli,angl,phas);
end;
the_wave1 = the_wave1 + the_wave1_1;

/* Read and build poly-chromatic wave */
wave the_wave2 = null;
wave the_wave2_1 = null;
real data2_1[] = [
#include "data\test_2_1.dat"
0];
for i=1 to (sizeof(data2_1[])-1)/5 do
   harmo = floor(data2_1[5*(i-1)+1]);
   ampli = data2_1[5*(i-1)+3];
   angl = data2_1[5*(i-1)+4];
   phas = data2_1[5*(i-1)+5];
   the_wave2_1 = the_wave2_1 + front(harmo,ampli,angl,phas);
end;
the_wave2 = the_wave2 + the_wave2_1;

/* Read and build poly-chromatic wave */
wave the_wave3 = null;
wave the_wave3_1 = null;
real data3_1[] = [
#include "data\test_3_1.dat"
0];
for i=1 to (sizeof(data3_1[])-1)/5 do
   harmo = floor(data3_1[5*(i-1)+1]);
   ampli = data3_1[5*(i-1)+3];
   angl = data3_1[5*(i-1)+4];
   phas = data3_1[5*(i-1)+5];
   the_wave3_1 = the_wave3_1 + front(harmo,ampli,angl,phas);
end;
the_wave3 = the_wave3 + the_wave3_1;

/* Read and build poly-chromatic wave */
wave the_wave4 = null;
wave the_wave4_1 = null;
real data4_1[] = [
#include "data\test_4_1.dat"
0];
for i=1 to (sizeof(data4_1[])-1)/5 do
   harmo = floor(data4_1[5*(i-1)+1]);
   ampli = data4_1[5*(i-1)+3];
   angl = data4_1[5*(i-1)+4];
   phas = data4_1[5*(i-1)+5];
   the_wave4_1 = the_wave4_1 + front(harmo,ampli,angl,phas);
end;
the_wave4 = the_wave4 + the_wave4_1;

/* Read and build poly-chromatic wave */
wave the_wave5 = null;
wave the_wave5_1 = null;
real data5_1[] = [
#include "data\test_5_1.dat"
0];
for i=1 to (sizeof(data5_1[])-1)/5 do
   harmo = floor(data5_1[5*(i-1)+1]);
   ampli = data5_1[5*(i-1)+3];
   angl = data5_1[5*(i-1)+4];
   phas = data5_1[5*(i-1)+5];
   the_wave5_1 = the_wave5_1 + front(harmo,ampli,angl,phas);
end;
the_wave5 = the_wave5 + the_wave5_1;

/* Read and build poly-chromatic wave */
wave the_wave6 = null;
wave the_wave6_1 = null;
real data6_1[] = [
#include "data\test_6_1.dat"
0];
for i=1 to (sizeof(data6_1[])-1)/5 do
   harmo = floor(data6_1[5*(i-1)+1]);
   ampli = data6_1[5*(i-1)+3];
   angl = data6_1[5*(i-1)+4];
   phas = data6_1[5*(i-1)+5];
   the_wave6_1 = the_wave6_1 + front(harmo,ampli,angl,phas);
end;
the_wave6 = the_wave6 + the_wave6_1;

/* Read and build poly-chromatic wave */
wave the_wave7 = null;
wave the_wave7_1 = null;
real data7_1[] = [
#include "data\test_7_1.dat"
0];
for i=1 to (sizeof(data7_1[])-1)/5 do
   harmo = floor(data7_1[5*(i-1)+1]);
   ampli = data7_1[5*(i-1)+3];
   angl = data7_1[5*(i-1)+4];
   phas = data7_1[5*(i-1)+5];
   the_wave7_1 = the_wave7_1 + front(harmo,ampli,angl,phas);
end;
the_wave7 = the_wave7 + the_wave7_1;

/* Read and build poly-chromatic wave */
wave the_wave8 = null;
wave the_wave8_1 = null;
real data8_1[] = [
#include "data\test_8_1.dat"
0];
for i=1 to (sizeof(data8_1[])-1)/5 do
   harmo = floor(data8_1[5*(i-1)+1]);
   ampli = data8_1[5*(i-1)+3];
   angl = data8_1[5*(i-1)+4];
   phas = data8_1[5*(i-1)+5];
   the_wave8_1 = the_wave8_1 + front(harmo,ampli,angl,phas);
end;
the_wave8 = the_wave8 + the_wave8_1;

/* Read and build poly-chromatic wave */
wave the_wave9 = null;
wave the_wave9_1 = null;
real data9_1[] = [
#include "data\test_9_1.dat"
0];
for i=1 to (sizeof(data9_1[])-1)/5 do
   harmo = floor(data9_1[5*(i-1)+1]);
   ampli = data9_1[5*(i-1)+3];
   angl = data9_1[5*(i-1)+4];
   phas = data9_1[5*(i-1)+5];
   the_wave9_1 = the_wave9_1 + front(harmo,ampli,angl,phas);
end;
the_wave9 = the_wave9 + the_wave9_1;

/* Read and build poly-chromatic wave */
wave the_wave10 = null;
wave the_wave10_1 = null;
real data10_1[] = [
#include "data\test_10_1.dat"
0];
for i=1 to (sizeof(data10_1[])-1)/5 do
   harmo = floor(data10_1[5*(i-1)+1]);
   ampli = data10_1[5*(i-1)+3];
   angl = data10_1[5*(i-1)+4];
   phas = data10_1[5*(i-1)+5];
   the_wave10_1 = the_wave10_1 + front(harmo,ampli,angl,phas);
end;
the_wave10 = the_wave10 + the_wave10_1;

/* Read and build poly-chromatic wave */
wave the_wave11 = null;
wave the_wave11_1 = null;
real data11_1[] = [
#include "data\test_11_1.dat"
0];
for i=1 to (sizeof(data11_1[])-1)/5 do
   harmo = floor(data11_1[5*(i-1)+1]);
   ampli = data11_1[5*(i-1)+3];
   angl = data11_1[5*(i-1)+4];
   phas = data11_1[5*(i-1)+5];
   the_wave11_1 = the_wave11_1 + front(harmo,ampli,angl,phas);
end;
the_wave11 = the_wave11 + the_wave11_1;

/* Read and build poly-chromatic wave */
wave the_wave12 = null;
wave the_wave12_1 = null;
real data12_1[] = [
#include "data\test_12_1.dat"
0];
for i=1 to (sizeof(data12_1[])-1)/5 do
   harmo = floor(data12_1[5*(i-1)+1]);
   ampli = data12_1[5*(i-1)+3];
   angl = data12_1[5*(i-1)+4];
   phas = data12_1[5*(i-1)+5];
   the_wave12_1 = the_wave12_1 + front(harmo,ampli,angl,phas);
end;
the_wave12 = the_wave12 + the_wave12_1;

/* Read and build poly-chromatic wave */
wave the_wave13 = null;
wave the_wave13_1 = null;
real data13_1[] = [
#include "data\test_13_1.dat"
0];
for i=1 to (sizeof(data13_1[])-1)/5 do
   harmo = floor(data13_1[5*(i-1)+1]);
   ampli = data13_1[5*(i-1)+3];
   angl = data13_1[5*(i-1)+4];
   phas = data13_1[5*(i-1)+5];
   the_wave13_1 = the_wave13_1 + front(harmo,ampli,angl,phas);
end;
the_wave13 = the_wave13 + the_wave13_1;

/* Read and build poly-chromatic wave */
wave the_wave14 = null;
wave the_wave14_1 = null;
real data14_1[] = [
#include "data\test_14_1.dat"
0];
for i=1 to (sizeof(data14_1[])-1)/5 do
   harmo = floor(data14_1[5*(i-1)+1]);
   ampli = data14_1[5*(i-1)+3];
   angl = data14_1[5*(i-1)+4];
   phas = data14_1[5*(i-1)+5];
   the_wave14_1 = the_wave14_1 + front(harmo,ampli,angl,phas);
end;
the_wave14 = the_wave14 + the_wave14_1;

/* Read and build poly-chromatic wave */
wave the_wave15 = null;
wave the_wave15_1 = null;
real data15_1[] = [
#include "data\test_15_1.dat"
0];
for i=1 to (sizeof(data15_1[])-1)/5 do
   harmo = floor(data15_1[5*(i-1)+1]);
   ampli = data15_1[5*(i-1)+3];
   angl = data15_1[5*(i-1)+4];
   phas = data15_1[5*(i-1)+5];
   the_wave15_1 = the_wave15_1 + front(harmo,ampli,angl,phas);
end;
the_wave15 = the_wave15 + the_wave15_1;

/* Read and build poly-chromatic wave */
wave the_wave16 = null;
wave the_wave16_1 = null;
real data16_1[] = [
#include "data\test_16_1.dat"
0];
for i=1 to (sizeof(data16_1[])-1)/5 do
   harmo = floor(data16_1[5*(i-1)+1]);
   ampli = data16_1[5*(i-1)+3];
   angl = data16_1[5*(i-1)+4];
   phas = data16_1[5*(i-1)+5];
   the_wave16_1 = the_wave16_1 + front(harmo,ampli,angl,phas);
end;
the_wave16 = the_wave16 + the_wave16_1;

/* Read and build poly-chromatic wave */
wave the_wave17 = null;
wave the_wave17_1 = null;
real data17_1[] = [
#include "data\test_17_1.dat"
0];
for i=1 to (sizeof(data17_1[])-1)/5 do
   harmo = floor(data17_1[5*(i-1)+1]);
   ampli = data17_1[5*(i-1)+3];
   angl = data17_1[5*(i-1)+4];
   phas = data17_1[5*(i-1)+5];
   the_wave17_1 = the_wave17_1 + front(harmo,ampli,angl,phas);
end;
the_wave17 = the_wave17 + the_wave17_1;

/* Read and build poly-chromatic wave */
wave the_wave18 = null;
wave the_wave18_1 = null;
real data18_1[] = [
#include "data\test_18_1.dat"
0];
for i=1 to (sizeof(data18_1[])-1)/5 do
   harmo = floor(data18_1[5*(i-1)+1]);
   ampli = data18_1[5*(i-1)+3];
   angl = data18_1[5*(i-1)+4];
   phas = data18_1[5*(i-1)+5];
   the_wave18_1 = the_wave18_1 + front(harmo,ampli,angl,phas);
end;
the_wave18 = the_wave18 + the_wave18_1;

/* Read and build poly-chromatic wave */
wave the_wave19 = null;
wave the_wave19_1 = null;
real data19_1[] = [
#include "data\test_19_1.dat"
0];
for i=1 to (sizeof(data19_1[])-1)/5 do
   harmo = floor(data19_1[5*(i-1)+1]);
   ampli = data19_1[5*(i-1)+3];
   angl = data19_1[5*(i-1)+4];
   phas = data19_1[5*(i-1)+5];
   the_wave19_1 = the_wave19_1 + front(harmo,ampli,angl,phas);
end;
the_wave19 = the_wave19 + the_wave19_1;

/* Read and build poly-chromatic wave */
wave the_wave20 = null;
wave the_wave20_1 = null;
real data20_1[] = [
#include "data\test_20_1.dat"
0];
for i=1 to (sizeof(data20_1[])-1)/5 do
   harmo = floor(data20_1[5*(i-1)+1]);
   ampli = data20_1[5*(i-1)+3];
   angl = data20_1[5*(i-1)+4];
   phas = data20_1[5*(i-1)+5];
   the_wave20_1 = the_wave20_1 + front(harmo,ampli,angl,phas);
end;
the_wave20 = the_wave20 + the_wave20_1;

/* Read and build poly-chromatic wave */
wave the_wave21 = null;
wave the_wave21_1 = null;
real data21_1[] = [
#include "data\test_21_1.dat"
0];
for i=1 to (sizeof(data21_1[])-1)/5 do
   harmo = floor(data21_1[5*(i-1)+1]);
   ampli = data21_1[5*(i-1)+3];
   angl = data21_1[5*(i-1)+4];
   phas = data21_1[5*(i-1)+5];
   the_wave21_1 = the_wave21_1 + front(harmo,ampli,angl,phas);
end;
the_wave21 = the_wave21 + the_wave21_1;

/* Read and build poly-chromatic wave */
wave the_wave22 = null;
wave the_wave22_1 = null;
real data22_1[] = [
#include "data\test_22_1.dat"
0];
for i=1 to (sizeof(data22_1[])-1)/5 do
   harmo = floor(data22_1[5*(i-1)+1]);
   ampli = data22_1[5*(i-1)+3];
   angl = data22_1[5*(i-1)+4];
   phas = data22_1[5*(i-1)+5];
   the_wave22_1 = the_wave22_1 + front(harmo,ampli,angl,phas);
end;
the_wave22 = the_wave22 + the_wave22_1;

/* End of wave data */

begin
   run "Run1, Bret, Tp=1s, Hs=0.0312m, ph=01" with (14)
      makewave the_wave1 on 1;
   end;
   run "Run2, Bret, Tp=1.2s, Hs=0.045m, ph=01" with (14)
      makewave the_wave2 on 1;
   end;
   run "Run3, Bret, Tp=1.4s, Hs=0.0612m, ph=01" with (14)
      makewave the_wave3 on 1;
   end;
   run "Run4, Bret, Tp=1.6s, Hs=0.0799m, ph=01" with (14)
      makewave the_wave4 on 1;
   end;
   run "Run5, Bret, Tp=1.8s, Hs=0.101m, ph=01" with (14)
      makewave the_wave5 on 1;
   end;
   run "Run6, Bret, Tp=2s, Hs=0.125m, ph=01" with (14)
      makewave the_wave6 on 1;
   end;
   run "Run7, Bret, Tp=2.2s, Hs=0.151m, ph=01" with (14)
      makewave the_wave7 on 1;
   end;
   run "Run8, Bret, Tp=2.4s, Hs=0.18m, ph=01" with (14)
      makewave the_wave8 on 1;
   end;
   run "Run9, Bret, Tp=2.6s, Hs=0.211m, ph=01" with (14)
      makewave the_wave9 on 1;
   end;
   run "Run10, Bret, Tp=2.8s, Hs=0.245m, ph=01" with (14)
      makewave the_wave10 on 1;
   end;
   run "Run11, Bret, Tp=1s, Hs=0.0156m, ph=01" with (14)
      makewave the_wave11 on 1;
   end;
   run "Run12, Bret, Tp=1.2s, Hs=0.0225m, ph=01" with (14)
      makewave the_wave12 on 1;
   end;
   run "Run13, Bret, Tp=1.4s, Hs=0.0306m, ph=01" with (14)
      makewave the_wave13 on 1;
   end;
   run "Run14, Bret, Tp=1.6s, Hs=0.0399m, ph=01" with (14)
      makewave the_wave14 on 1;
   end;
   run "Run15, Bret, Tp=1.8s, Hs=0.0506m, ph=01" with (14)
      makewave the_wave15 on 1;
   end;
   run "Run16, Bret, Tp=2s, Hs=0.0625m, ph=01" with (14)
      makewave the_wave16 on 1;
   end;
   run "Run17, Bret, Tp=2.2s, Hs=0.0755m, ph=01" with (14)
      makewave the_wave17 on 1;
   end;
   run "Run18, Bret, Tp=2.4s, Hs=0.09m, ph=01" with (14)
      makewave the_wave18 on 1;
   end;
   run "Run19, Bret, Tp=2.4s, Hs=0.09m, ph=02" with (14)
      makewave the_wave19 on 1;
   end;
   run "Run20, Bret, Tp=2.4s, Hs=0.09m, ph=03" with (14)
      makewave the_wave20 on 1;
   end;
   run "Run21, Bret, Tp=2.6s, Hs=0.106m, ph=01" with (14)
      makewave the_wave21 on 1;
   end;
   run "Run22, Bret, Tp=2.8s, Hs=0.122m, ph=01" with (14)
      makewave the_wave22 on 1;
   end;
end;
